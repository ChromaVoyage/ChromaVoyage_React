{"ast":null,"code":"var _jsxFileName = \"/Users/esthrelar/Documents/Programming/TGthon/ChromaVoyage_React/src/KakaoMap2.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from 'react';\nimport { MyContext } from './MyContextProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\nconst KakaoMap2 = () => {\n  _s();\n  const {\n    setName,\n    setSelectedLocations\n  } = useContext(MyContext);\n  const geojson = require('./TL_SCCO_SIG.json'); // GeoJSON 데이터를 가져옵니다.\n\n  useEffect(() => {\n    const data = geojson.features;\n    const mapContainer = document.getElementById('pollution-map'); // 지도를 표시할 div\n    const mapOption = {\n      center: new kakao.maps.LatLng(36.266826, 125.9786567),\n      // 지도의 중심좌표\n      level: 13 // 지도의 확대 레벨\n    };\n\n    const map = new kakao.maps.Map(mapContainer, mapOption);\n    const customOverlay = new kakao.maps.CustomOverlay({\n      content: '<div class=\"area-tooltip\"></div>',\n      map: map,\n      yAnchor: 1,\n      zIndex: 2\n    });\n    const displayArea = (coordinates, name) => {\n      const path = coordinates[0].map(coordinate => new kakao.maps.LatLng(coordinate[1], coordinate[0]));\n      const polygon = new kakao.maps.Polygon({\n        map: map,\n        path: path,\n        strokeWeight: 2,\n        strokeColor: '#7A4495',\n        strokeOpacity: 0.8,\n        strokeStyle: 'solid',\n        fillColor: '#fff',\n        fillOpacity: 0.5\n      });\n\n      // 임시 색칠을 위한 변수\n      let isTemporaryFilled = false;\n\n      // 다각형에 mouseover 이벤트를 등록하고 이벤트가 발생하면 임시로 색칠합니다.\n      kakao.maps.event.addListener(polygon, 'mouseover', function (mouseEvent) {\n        if (!isTemporaryFilled && !polygon.isFilled) {\n          polygon.setOptions({\n            fillColor: '#09f'\n          });\n          isTemporaryFilled = true;\n        }\n        customOverlay.setContent('<div class=\"area-tooltip\">' + name + '</div>');\n        customOverlay.setPosition(mouseEvent.latLng);\n        customOverlay.setMap(map);\n      });\n\n      // 다각형에 mouseout 이벤트를 등록하고 이벤트가 발생하면 임시 색칠을 초기화합니다.\n      kakao.maps.event.addListener(polygon, 'mouseout', function () {\n        if (!polygon.isFilled) {\n          polygon.setOptions({\n            fillColor: '#fff'\n          });\n          isTemporaryFilled = false;\n        }\n        customOverlay.setMap(null);\n      });\n\n      // 다각형에 click 이벤트를 등록하고 이벤트가 발생하면 완전한 색으로 변경합니다.\n      kakao.maps.event.addListener(polygon, 'click', function () {\n        if (!polygon.isFilled) {\n          polygon.setOptions({\n            fillColor: '#7A4495'\n          });\n          isTemporaryFilled = false;\n          polygon.isFilled = true;\n          console.log('선택한 지역:', name);\n          setName(name);\n          setSelectedLocations(prev => [...prev, name]);\n        } else {\n          polygon.setOptions({\n            fillColor: '#fff'\n          });\n          isTemporaryFilled = false;\n          polygon.isFilled = false;\n          setSelectedLocations(prev => prev.filter(location => location !== name));\n        }\n      });\n    };\n    data.forEach(val => {\n      const coordinates = val.geometry.coordinates;\n      const name = val.properties.SIG_KOR_NM;\n      displayArea(coordinates, name);\n    });\n  }, [setName, setSelectedLocations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      position: 'fixed',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pollution-map\",\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(KakaoMap2, \"6Pn+sGhEQFaklIlM+2hDBMERhFM=\");\n_c = KakaoMap2;\nexport default KakaoMap2;\nvar _c;\n$RefreshReg$(_c, \"KakaoMap2\");","map":{"version":3,"names":["React","useContext","useEffect","MyContext","jsxDEV","_jsxDEV","kakao","window","KakaoMap2","_s","setName","setSelectedLocations","geojson","require","data","features","mapContainer","document","getElementById","mapOption","center","maps","LatLng","level","map","Map","customOverlay","CustomOverlay","content","yAnchor","zIndex","displayArea","coordinates","name","path","coordinate","polygon","Polygon","strokeWeight","strokeColor","strokeOpacity","strokeStyle","fillColor","fillOpacity","isTemporaryFilled","event","addListener","mouseEvent","isFilled","setOptions","setContent","setPosition","latLng","setMap","console","log","prev","filter","location","forEach","val","geometry","properties","SIG_KOR_NM","style","display","position","top","right","bottom","left","children","id","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/esthrelar/Documents/Programming/TGthon/ChromaVoyage_React/src/KakaoMap2.js"],"sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { MyContext } from './MyContextProvider';\n\nconst { kakao } = window;\n\nconst KakaoMap2 = () => {\n  const { setName, setSelectedLocations } = useContext(MyContext);\n  const geojson = require('./TL_SCCO_SIG.json'); // GeoJSON 데이터를 가져옵니다.\n\n  useEffect(() => {\n    const data = geojson.features;\n\n    const mapContainer = document.getElementById('pollution-map'); // 지도를 표시할 div\n    const mapOption = {\n      center: new kakao.maps.LatLng(36.266826, 125.9786567), // 지도의 중심좌표\n      level: 13, // 지도의 확대 레벨\n    };\n\n    const map = new kakao.maps.Map(mapContainer, mapOption);\n    const customOverlay = new kakao.maps.CustomOverlay({\n      content: '<div class=\"area-tooltip\"></div>',\n      map: map,\n      yAnchor: 1,\n      zIndex: 2,\n    });\n\n    const displayArea = (coordinates, name) => {\n      const path = coordinates[0].map((coordinate) => new kakao.maps.LatLng(coordinate[1], coordinate[0]));\n\n      const polygon = new kakao.maps.Polygon({\n        map: map,\n        path: path,\n        strokeWeight: 2,\n        strokeColor: '#7A4495',\n        strokeOpacity: 0.8,\n        strokeStyle: 'solid',\n        fillColor: '#fff',\n        fillOpacity: 0.5,\n      });\n\n      // 임시 색칠을 위한 변수\n      let isTemporaryFilled = false;\n\n      // 다각형에 mouseover 이벤트를 등록하고 이벤트가 발생하면 임시로 색칠합니다.\n      kakao.maps.event.addListener(polygon, 'mouseover', function (mouseEvent) {\n        if (!isTemporaryFilled && !polygon.isFilled) {\n          polygon.setOptions({ fillColor: '#09f' });\n          isTemporaryFilled = true;\n        }\n        customOverlay.setContent('<div class=\"area-tooltip\">' + name + '</div>');\n        customOverlay.setPosition(mouseEvent.latLng);\n        customOverlay.setMap(map);\n      });\n\n      // 다각형에 mouseout 이벤트를 등록하고 이벤트가 발생하면 임시 색칠을 초기화합니다.\n      kakao.maps.event.addListener(polygon, 'mouseout', function () {\n        if (!polygon.isFilled) {\n          polygon.setOptions({ fillColor: '#fff' });\n          isTemporaryFilled = false;\n        }\n        customOverlay.setMap(null);\n      });\n\n      // 다각형에 click 이벤트를 등록하고 이벤트가 발생하면 완전한 색으로 변경합니다.\n      kakao.maps.event.addListener(polygon, 'click', function () {\n        if (!polygon.isFilled) {\n          polygon.setOptions({ fillColor: '#7A4495' });\n          isTemporaryFilled = false;\n          polygon.isFilled = true;\n          console.log('선택한 지역:', name);\n          setName(name);\n          setSelectedLocations((prev) => [...prev, name]);\n        } else {\n          polygon.setOptions({ fillColor: '#fff' });\n          isTemporaryFilled = false;\n          polygon.isFilled = false;\n          setSelectedLocations((prev) => prev.filter((location) => location !== name));\n        }\n      });\n    };\n\n    data.forEach((val) => {\n      const coordinates = val.geometry.coordinates;\n      const name = val.properties.SIG_KOR_NM;\n      displayArea(coordinates, name);\n    });\n  }, [setName, setSelectedLocations]);\n\n  return (\n    <div style={{ display: 'flex', position: 'fixed', top: 0, right: 0, bottom: 0, left: 0 }}>\n      <div id=\"pollution-map\" style={{ width: '100%', height: '100%' }}></div>\n    </div>\n  );\n};\n\nexport default KakaoMap2;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}